
Class HVROffhandWeapHandler : Eventhandler
{
	override void WorldTick()
	{
		if(_isTitlemap) return;
		
		Playerinfo player = Players[ConsolePlayer];
		if(!player) return;
		let pmo = player.mo;
		
		if(level.time > 35)
		{
			let weap = Weapon(pmo.FindInventory("HVRStaff"));
			weap.bNohandswitch = true;
			
			bool gauntletEquipBoth = CVar.GetCVar("hvr_gauntlet", player).GetBool();
			
			let gauntlet = Weapon(pmo.FindInventory("HVRGauntlets"));
			let powergauntlet = Weapon(pmo.FindInventory("HVRGauntletsPowered"));
			
			if(gauntletEquipBoth)
			{
				if(gauntlet) gauntlet.bNohandswitch = true;
				if(powergauntlet) powergauntlet.bNohandswitch = true;
			}
			else
			{
				if(gauntlet) gauntlet.bNohandswitch = false;
				if(powergauntlet) powergauntlet.bNohandswitch = false;
			}
			
			if(gauntlet && player.ReadyWeapon == gauntlet && NumOHWeapons() < 7 && gauntletEquipBoth)
			{
				pmo.giveinventory("OffhandGauntlet", 1);
				let gauntlet2 = Weapon(pmo.FindInventory("OffhandGauntlet"));
				if(player.OffhandWeapon == gauntlet2) return;
				
				player.OffhandWeapon = gauntlet2;
				player.PendingWeapon = gauntlet2;
				pmo.BringUpWeapon();
				return;
			}
			else if(powergauntlet && player.ReadyWeapon == powergauntlet && NumOHWeapons() < 7 && gauntletEquipBoth)
			{
				pmo.giveinventory("OffhandGauntletPowered", 1);
				let gauntlet2 = Weapon(pmo.FindInventory("OffhandGauntletPowered"));
				if(player.OffhandWeapon == gauntlet2) return;
				
				player.OffhandWeapon = gauntlet2;
				player.PendingWeapon = gauntlet2;
				pmo.BringUpWeapon();
				return;
			}
			else
			{
				if(pmo.countinv("OffhandGauntlet")) pmo.takeinventory("OffhandGauntlet", 1);
				if(pmo.countinv("OffhandGauntletPowered")) pmo.takeinventory("OffhandGauntletPowered", 1);
			}
			
			if(!player.ReadyWeapon)
			{
				weap.bOffhandweapon = false;
				player.ReadyWeapon = weap;
				player.PendingWeapon = weap;
				pmo.BringUpWeapon();
			}
			else if(!player.OffhandWeapon)
			{
				weap.bOffhandweapon = true;
				player.OffhandWeapon = weap;
				player.PendingWeapon = weap;
				pmo.BringUpWeapon();
			}
		}
	}

	override void WorldLoaded(WorldEvent event)
	{
		_isTitlemap = CheckTitlemap();
	}

	private static bool CheckTitlemap()
	{
		bool isTitlemap = (level.mapname == "TITLEMAP");
		return isTitlemap;
	}
	
	private int NumOHWeapons()
	{
		int weaps = 0;
		
		Playerinfo player = Players[ConsolePlayer];
		if(!player) return weaps;
		let pmo = player.mo;
		
		let staff = Weapon(pmo.FindInventory("HVRStaff"));
		let staff2 = Weapon(pmo.FindInventory("HVRStaffPowered"));
		let wand = Weapon(pmo.FindInventory("HVRWand"));
		let wand2 = Weapon(pmo.FindInventory("HVRWandPowered"));
		let xbow = Weapon(pmo.FindInventory("HVRCrossbow"));
		let xbow2 = Weapon(pmo.FindInventory("HVRCrossbowPowered"));
		let blaster = Weapon(pmo.FindInventory("HVRBlaster"));
		let blaster2 = Weapon(pmo.FindInventory("HVRBlasterPowered"));
		let skullrod = Weapon(pmo.FindInventory("HVRSkullRod"));
		let skullrod2 = Weapon(pmo.FindInventory("HVRSkullRodPowered"));
		let phoenix = Weapon(pmo.FindInventory("HVRPhoenixRod"));
		let phoenix2 = Weapon(pmo.FindInventory("HVRPhoenixRodPowered"));
		let mace = Weapon(pmo.FindInventory("HVRMace"));
		let mace2 = Weapon(pmo.FindInventory("HVRMacePowered"));
		
		if( (staff && staff.owner && staff.bOffhandweapon) || (staff2 && staff2.owner && staff2.bOffhandweapon) ) weaps++;
		if( (wand && wand.owner && wand.bOffhandweapon) || (wand2 && wand2.owner && wand2.bOffhandweapon) ) weaps++;
		if( (xbow && xbow.owner && xbow.bOffhandweapon) || (xbow2 && xbow2.owner && xbow2.bOffhandweapon) ) weaps++;
		if( (blaster && blaster.owner && blaster.bOffhandweapon) || (blaster2 && blaster2.owner && blaster2.bOffhandweapon) ) weaps++;
		if( (skullrod && skullrod.owner && skullrod.bOffhandweapon) || (skullrod2 && skullrod2.owner && skullrod2.bOffhandweapon) ) weaps++;
		if( (phoenix && phoenix.owner && phoenix.bOffhandweapon) || (phoenix2 && phoenix2.owner && phoenix2.bOffhandweapon) ) weaps++;
		if( (mace && mace.owner && mace.bOffhandweapon) || (mace2 && mace2.owner && mace2.bOffhandweapon) ) weaps++;
		
		return weaps;
	}
	
	private bool _isTitlemap;
}

//it loads the settings into player's inventory so other actors can check them without scanning for actual cvars
Class HVRConfigHandler : Eventhandler
{
	override void WorldTick()
	{
		Playerinfo player = Players[ConsolePlayer];
		if(!player) return;
		let pmo = player.mo;
		if(pmo.health < 1) return;
		
		if(level.time % 70 == 0) 
		{
			_settings 			= hvr_Settings.of();
			int pickupModel 		= _settings.pickupModel();
			bool distModel 			= _settings.distModel();
			int modelDist 			= _settings.modelDist();
			bool showParticles 		= _settings.showParticles();
			bool lessParticles 		= _settings.lessParticles();
			bool shieldBreaks 		= _settings.shieldBreaks();
			int shieldStrength 		= _settings.shieldStrength();
			double shieldRegen 		= _settings.shieldRegen();
			
			if(!pmo.countinv("HVRConfigItem")) pmo.giveinventory("HVRConfigItem", 1);
			
			let configItem = HVRConfigItem(pmo.findinventory("HVRConfigItem"));
			
			configItem.pickupModel = pickupModel;
			configItem.distModel = distModel;
			configItem.modelDist = modelDist;
			configItem.showParticles = showParticles;
			configItem.lessParticles = lessParticles;
			configItem.shieldBreaks = shieldBreaks;
			configItem.shieldStrength = shieldStrength;
			configItem.shieldRegen = shieldRegen;
			
			if(developer > 0)
			{
				//auto-cycle between models for dev test
				if(test_count == 2)
					test_count = 0;
				else
					test_count++;
				configItem.pickupModel = test_count;
			}
		}
	}
	
	private hvr_Settings _settings;
	private int test_count;
}

//inventory item where the configs are stored
Class HVRConfigItem : Inventory
{
	Default
	{
	Inventory.maxamount 1;
	}
	
	int pickupModel;
	bool distModel;
	int modelDist;
	bool showParticles;
	bool lessParticles;
	bool shieldBreaks;
	int shieldStrength;
	double shieldRegen;
}

Class HVRHapticHelper : EventHandler
{
	static void BuzzHand(int hand = 0)
	{
		Let player = Players[ConsolePlayer].mo;
		if(!player || player.health < 1) return;
		
		player.LineAttack(0, 0, 0, 1, "melee", "HVRhapticDummyPuff", LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ | (hand ? LAF_ISOFFHAND : 0));
	}
	
	static void Buzz()
	{
		HVRHapticHelper.BuzzHand();
		HVRHapticHelper.BuzzHand(1);
	}
	
	static void BuzzOffhand()
	{
		HVRHapticHelper.BuzzHand(1);
	}
	
	static void BuzzWeapon(Weapon weap)
	{
		if(!weap || !weap.owner) return;
		
		int hand = weap.bOffhandWeapon ? 1 : 0;
		HVRHapticHelper.BuzzHand(hand);
	}
}

Class HVRhapticDummyPuff : Actor
{
	Default
	{
		Mass        0;
		Radius      1;
		Height      2;
		Damage 		1;
		DamageType "Melee";
		+NOBLOCKMAP;
		+NOGRAVITY;
		+BLOODLESSIMPACT;
		+PUFFONACTORS;
		+DONTSPLASH;
		+NOTRIGGER;
		+NOTARGET;
		+FORCEXYBILLBOARD;
		+NOTONAUTOMAP;
		+SKYEXPLODE;
	}

	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 1;
		stop;
	}
}