
Class HVRMace : HereticVRWeapon replaces Mace
{
	Default
	{
	Weapon.SelectionOrder 1400;
	Weapon.AmmoUse 1;
	Weapon.AmmoGive1 50;
	Weapon.AmmoType "MaceAmmo";
	Weapon.SisterWeapon "HVRMacePowered";
	Inventory.PickupMessage "$TXT_WPNMACE";
	Tag "$TAG_MACE";
	}

	action void A_FireMaceX()
	{
		if (player == null)
		{
			return;
		}
		int alflags = 0;
		int hand = 0;
		Weapon weapon = invoker == player.OffhandWeapon ? player.OffhandWeapon : player.ReadyWeapon;
		if (weapon != null && weapon == invoker)
		{
			hand = weapon.bOffhandWeapon ? 1 : 0;
			alflags |= hand ? ALF_ISOFFHAND : 0;
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}

		Vector3 spawnpos = Pos + (0, 0, 28 - Floorclip);
		let directionAngle = angle;
		let directionPitch = pitch;
		if (player.mo.OverrideAttackPosDir)
		{
			if (hand == 1)
			{
				spawnpos = player.mo.OffhandPos;
				directionAngle = player.mo.OffhandAngle + 90;
				directionPitch = -player.mo.OffhandPitch;
			}
			else
			{
				spawnpos = player.mo.AttackPos;
				directionAngle = player.mo.AttackAngle + 90;
				directionPitch = -player.mo.AttackPitch;
			}
		}

		if (random[MaceAtk]() < 28)
		{
			Actor ball = Spawn("MaceFX2", spawnpos, ALLOW_REPLACE);
			if (ball != null)
			{
				ball.Vel.Z = 2 - clamp(tan(directionPitch), -5, 5);
				ball.target = self;
				ball.angle = directionAngle;
				ball.AddZ(ball.Vel.Z);
				ball.VelFromAngle();
				ball.Vel += Vel.xy / 2;
				ball.A_StartSound ("weapons/maceshoot", CHAN_BODY);
				ball.CheckMissileSpawn (radius);
			}
		}
		else
		{
			let psp = player.GetPSprite(hand ? PSP_OFFHANDWEAPON : PSP_WEAPON);
			if (psp)
			{
				psp.x = random[MaceAtk](-2, 1);
				psp.y = WEAPONTOP + random[MaceAtk](0, 3);
			}
			Actor ball = SpawnPlayerMissile("MaceFX1", angle + (random[MaceAtk](-4, 3) * (360. / 256)), aimflags: alflags);
			if (ball)
			{
				ball.special1 = 16; // tics till dropoff
			}
		}
	}

	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "SpawnModel");
		WMCE A 1;
		Loop;
	SpawnVoxel:
		MCEV A 1;
		Goto Spawn;
	SpawnModel:
		MCEM A 1;
		Goto Spawn;
	Ready:
		TNT1 A 0;
		MACE A 0 A_SetExtraModel("NHFM");
		#### A 1 A_WeaponReady;
		Loop;
	Deselect:
		MACE A 0 A_SetExtraModel("NHFM");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Lower;
		Loop;
		#### # 1 A_Lower (120);
		Loop;
	Select:
		MACE A 0 A_SetExtraModel("NHFM");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Raise;
		Loop;
		#### # 1 A_Raise (120);
		Loop;
	Fire:
		MACE B 0 A_SetExtraModel("NHFM");
		#### B 4;
	Hold:
		#### CDEB 3 A_FireMaceX;
		#### C 4 A_ReFire;
		#### DEBB 4;
		Goto Ready;
	Placeholder:
		NHFM ABCDE 1;
	}
}

Class HVRMacePowered : HVRMace
{
	Default
	{
	+WEAPON.POWERED_UP
	Weapon.AmmoUse 5;
	Weapon.AmmoGive 0;
	Weapon.SisterWeapon "HVRMace";
	Tag "$TAG_MACEP";
	}

	action void A_FireMace2X()
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}

		int alflags = 0;
		int hand = 0;
		Weapon weapon = invoker == player.OffhandWeapon ? player.OffhandWeapon : player.ReadyWeapon;
		if (weapon != null && weapon == invoker)
		{
			hand = weapon.bOffhandWeapon ? 1 : 0;
			alflags |= weapon.bOffhandWeapon ? ALF_ISOFFHAND : 0;
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}

		let directionPitch = pitch;
		if (player.mo.OverrideAttackPosDir)
		{
			if (hand == 1)
			{
				directionPitch = -player.mo.OffhandPitch;
			}
			else
			{
				directionPitch = -player.mo.AttackPitch;
			}
		}

		Actor mo = SpawnPlayerMissile ("MaceFX4", angle, pLineTarget:t, aimflags: alflags);
		if (mo)
		{
			mo.Vel.xy += Vel.xy;
			mo.Vel.Z = 2 - clamp(tan(directionPitch), -5, 5);
			if (t.linetarget && !t.unlinked)
			{
				mo.tracer = t.linetarget;
			}
		}
		A_StartSound ("weapons/maceshoot", CHAN_WEAPON);
	}

	States
	{
	Fire:
	Hold:
		MACE B 0 A_SetExtraModel("NHFM");
		#### B 4;
		#### D 4 A_FireMace2X;
		#### B 4;
		#### A 8 A_ReFire;
		Goto Ready;
	}
}