
Class HVRSkullRod : HereticVRWeapon replaces SkullRod
{
	Default
	{
	Weapon.SelectionOrder 200;
	Weapon.AmmoUse1 1;
	Weapon.AmmoGive1 50;
	Weapon.AmmoType1 "SkullRodAmmo";
	Weapon.SisterWeapon "HVRSkullRodPowered";
	Inventory.PickupMessage "$TXT_WPNSKULLROD";
	Tag "$TAG_SKULLROD";
	}
	
	action void A_FireSkullRodX()
	{
		if (player == null)
		{
			return;
		}

		int alflags = 0;
		Weapon weapon = invoker == player.OffhandWeapon ? player.OffhandWeapon : player.ReadyWeapon;
		if (weapon != null)
		{
			alflags |= weapon.bOffhandWeapon ? ALF_ISOFFHAND : 0;
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}
		Actor mo = SpawnPlayerMissile ("HornRodFX1", aimflags: alflags);
		// Randomize the first frame
		if (mo && random[FireSkullRod]() > 128)
		{
			mo.SetState (mo.CurState.NextState);
		}
	}

	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "SpawnModel");
		WSKL A 1;
		Loop;
	SpawnVoxel:
		SKLV A 1;
		Goto Spawn;
	SpawnModel:
		SKLM A 1;
		Goto Spawn;
	Ready:
		TNT1 A 0;
		HROD A 0 A_SetExtraModel("NHRD");
		#### # 1 A_WeaponReady;
		Loop;
	Deselect:
		HROD A 0 A_SetExtraModel("NHRD");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Lower;
		Loop;
		#### # 1 A_Lower (120);
		Loop;
	Select:
		HROD A 0 A_SetExtraModel("NHRD");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Raise;
		Loop;
		#### # 1 A_Raise (120);
		Loop;
	Fire:
		HROD A 0 A_SetExtraModel("NHRD");
		#### # 0 A_GunFlash("Flash");
		#### AB 4 A_FireSkullRodX;
		#### # 0 A_ReFire;
		Goto Ready;
	Flash:
		HRFL A 1 Bright A_Light1;
		Goto Lightdone;
	Placeholder:
		NHRD ABCDDEF 1;
		Stop;
	}
}

Class HVRSkullRodPowered : HVRSkullRod
{
	Default
	{
	+WEAPON.POWERED_UP
	Weapon.AmmoUse1 5;
	Weapon.AmmoGive1 0;
	Weapon.SisterWeapon "HVRSkullRod";
	Tag "$TAG_SKULLRODP";
	}
	
	action void A_FireSkullRodX2()
	{
		FTranslatedLineTarget t;
		
		if (player == null)
		{
			return;
		}

		int alflags = 0;
		Weapon weapon = invoker == player.OffhandWeapon ? player.OffhandWeapon : player.ReadyWeapon;
		if (weapon != null)
		{
			alflags |= weapon.bOffhandWeapon ? ALF_ISOFFHAND : 0;
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}
		// Use MissileActor instead of the first return value from P_SpawnPlayerMissile 
		// because we need to give info to it, even if it exploded immediately.
		Actor mo, MissileActor;
		[mo, MissileActor] = SpawnPlayerMissile ("HornRodFX2", angle, pLineTarget: t, aimflags: alflags);
		if (MissileActor != null)
		{
			if (t.linetarget && !t.unlinked)
			{
				MissileActor.tracer = t.linetarget;
			}
			MissileActor.A_StartSound ("weapons/hornrodpowshoot", CHAN_WEAPON);
		}
	}

	States
	{
	Fire:
		HROD A 0 A_SetExtraModel("NHRD");
		#### C 2;
		#### D 3;
		#### E 2;
		#### B 0 A_GunFlash("Flash");
		#### B 3;
		#### B 4 A_FireSkullRodX2;
		#### B 2;
		#### E 3;
		#### D 2;
		#### C 2 A_ReFire;
		Goto Ready;
	Flash:
		HRFL B 3 Bright A_Light1;
		HRFL C 4 Bright A_Light2;
		HRFL B 2 Bright A_Light1;
		Goto lightdone;
	}
}