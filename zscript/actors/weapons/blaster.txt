
Class HVRBlaster : HereticVRWeapon replaces Blaster
{
	Default
	{
	+BLOODSPLATTER
	Weapon.SelectionOrder 500;
	Weapon.AmmoUse 1;
	Weapon.AmmoGive 30;
	Weapon.AmmoType "BlasterAmmo";
	Weapon.SisterWeapon "HVRBlasterPowered";
	Inventory.PickupMessage "$TXT_WPNBLASTER";
	Tag "$TAG_BLASTER";
	Obituary "$OB_MPBLASTER";
	}
	
	action void A_FireBlasterX()
	{
		if (player == null)
		{
			return;
		}
		int laflags = 0;
		int alflags = 0;
		Weapon weapon = invoker == player.OffhandWeapon ? player.OffhandWeapon : player.ReadyWeapon;
		if (weapon != null)
		{
			laflags |= weapon.bOffhandWeapon ? LAF_ISOFFHAND : 0;
			alflags |= weapon.bOffhandWeapon ? ALF_ISOFFHAND : 0;
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}

		double pitch = BulletSlope(aimflags: alflags);
		int damage = random[FireBlaster](1, 8) * 4;
		double ang = angle;
		double angOffset = 0;
		if (player.refire)
		{
			angOffset = Random2[FireBlaster]() * (5.625 / 256);
			ang += angOffset;

			/*if (GetCVar ("vertspread") && !sv_novertspread)
			{
				pitch += Random2[FireBlaster]() * (3.549 / 256);
			}*/
		}
		LineAttack (ang, PLAYERMISSILERANGE, pitch, damage, 'Hitscan', "BlasterPuff", laflags);
		if(invoker.showParticles) A_FireProjectile("BlasterTracer", angOffset,false,0,0,0,0);
		
		A_StartSound ("weapons/blastershoot", CHAN_WEAPON);
	}

	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "SpawnModel");
		WBLS A 1;
		Loop;
	SpawnVoxel:
		BLSV A 1;
		Goto Spawn;
	SpawnModel:
		BLSM A 1;
		Goto Spawn;
	Ready:
		TNT1 A 0;
		BLSR A 0 A_SetExtraModel("NHBL");
		#### # 1 A_WeaponReady;
		Loop;
	Deselect:
		BLSR A 0 A_SetExtraModel("NHBL");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Lower;
		Loop;
		#### # 1 A_Lower (120);
		Loop;
	Select:
		BLSR A 0 A_SetExtraModel("NHBL");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Raise;
		Loop;
		#### # 1 A_Raise (120);
		Loop;
	Fire:
		BLSR A 0 A_SetExtraModel("NHBL");
		#### # 0 A_GunFlash("Flash");
		#### B 6;
	Hold:
		#### # 0 A_GunFlash("Flash2");
		#### # 2 A_FireBlasterX;
		#### # 4;
		#### A 0 A_ReFire;
		Goto Ready;
	Flash:
		TNT1 A 0 A_jumpIf(invoker.showFLashSprite == false, "NoFlash");
		BLFL AB 3 Bright;
		BLFL C 2 Bright A_Light1;
		BLFL BA 2 Bright;
		Goto Lightdone;
	Flash2:
		TNT1 A 0 A_jumpIf(invoker.showFLashSprite == false, "NoFlash");
		BLFL C 2 Bright A_Light1;
		BLFL BA 2 Bright;
		Goto Lightdone;
	NoFlash:
		TNT1 A 1;
		Stop;
	Placeholder:
		NHBL ABC 1;
		Stop;
	}
}

Class HVRBlasterPowered : HVRBlaster
{
	Default
	{
	+WEAPON.POWERED_UP
	Weapon.AmmoUse 5;
	Weapon.AmmoGive 0;
	Weapon.SisterWeapon "HVRBlaster";
	Tag "$TAG_BLASTERP";
	}
	
	States
	{
	Fire:
		BLSR A 0 A_SetExtraModel("NHBL");
		#### B 0;
	Hold:
		#### # 0 A_GunFlash("Flash");
		#### # 0 A_JumpIf(invoker.showParticles == false, 2);
		#### # 0 A_FireProjectile("PoweredBlasterTracer");
		#### # 3 A_FireProjectile("BlasterFX1");
		#### # 8;
		#### A 0 A_ReFire;
		Goto Ready;
	Flash:
		TNT1 A 0 A_jumpIf(invoker.showFLashSprite == false, "NoFlash");
		BLFL AB 1 Bright;
		BLFL C 2 Bright A_Light1;
		BLFL BA 2 Bright;
		Goto Lightdone;
	}
}