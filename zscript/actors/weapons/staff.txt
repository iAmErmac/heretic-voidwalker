
Class HVRStaff : HereticVRWeapon replaces Staff
{
	private int particleFXpitch;

	Default
	{
	Weapon.SelectionOrder 3801;
	+THRUGHOST
	+WEAPON.WIMPY_WEAPON
	+WEAPON.MELEEWEAPON
	+WEAPON.NOALERT
	//+WEAPON.OFFHANDWEAPON
	Weapon.SisterWeapon "HVRStaffPowered";
	Obituary "$OB_MPSTAFF";
	Tag "$TAG_STAFF";
	}
	
	override void Tick()
	{
		if(owner && owner.player)
		{
			if(useShield)
			{
				if(!owner.player.mo.countinv("HVRRuneShield")) owner.player.mo.SetInventory("HVRRuneShield", shieldStart ? 2 : 1);
				showShieldChargeFX();
			}
			else
			{
				if(owner.player.mo.countinv("HVRRuneShield")) owner.player.mo.SetInventory("HVRRuneShield", 0);
			}
		}
		Super.Tick();
	}
	
	action void A_StaffAttackX (int damage, class<Actor> puff)
	{
		FTranslatedLineTarget t;

		if (player == null)
		{
			return;
		}

		int laflags = LAF_ISMELEEATTACK;
		int alflags = 0;
		Weapon weapon = invoker == player.OffhandWeapon ? player.OffhandWeapon : player.ReadyWeapon;
		if (weapon != null)
		{
			laflags |= weapon.bOffhandWeapon ? LAF_ISOFFHAND : 0;
			alflags |= weapon.bOffhandWeapon ? ALF_ISOFFHAND : 0;
			if (!weapon.DepleteAmmo (weapon.bAltFire))
				return;
		}
		double ang = angle + Random2[StaffAtk]() * (5.625 / 256);
		double slope = AimLineAttack (ang, DEFMELEERANGE, flags: alflags);
		LineAttack (ang, DEFMELEERANGE, slope, damage, 'Melee', puff, laflags, t);
	}
	
	action int shieldHealthRemain()
	{
		if(!player) return 0;
		
		let shieldItem = HVRRuneShield(player.mo.findinventory("HVRRuneShield"));
		if(shieldItem)
		{
			let shieldStrength = shieldItem.shieldStrength;
			let currentShieldHealth = shieldItem.shieldHealth;
			if(currentShieldHealth == shieldStrength)
			{
				return 5;
			}
			else if(shieldStrength == 3 && currentShieldHealth == 2)
			{
				return 3;
			}
			else
			{
				return currentShieldHealth;
			}
		}
		else
		{
			return 0;
		}
	}
	
	action void A_RaiseShield()
	{
		let runeShield = Actor.Spawn("ReflectorShield");
		runeShield.SetOrigin((player.readyweapon == invoker ? player.mo.AttackPos : player.mo.OffhandPos), true);
		runeShield.master = invoker.owner;
	}
	
	action void A_ShieldSlap()
	{
		if(!invoker.useShield || !invoker.shieldSlap) return;
		
		let shieldItem = HVRRuneShield(player.mo.findinventory("HVRRuneShield"));
		if(!shieldItem || shieldItem.shieldHealth == 0) return;
		
		A_StartSound("WHOPP", CHAN_WEAPON);
	
		let pmo = player.mo;
		double angle = pmo.angle;
		double pitch = pmo.AimTarget() ? pmo.BulletSlope(null, ALF_PORTALRESTRICT) : pmo.pitch;
		double dist = invoker.shieldSlapDist * 64;
		bool isOffhand = player.OffhandWeapon == invoker;
		FTranslatedLineTarget t, t2, t3, t4, t5, t6, t7;
		
		pmo.LineAttack(angle, dist, pitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0), t);
		pmo.LineAttack(angle + 20, dist, pitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0), t2);
		pmo.LineAttack(angle + 45, dist, pitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0), t3);
		pmo.LineAttack(angle + 70, dist, pitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0), t4);
		pmo.LineAttack(angle - 20, dist, pitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0), t5);
		pmo.LineAttack(angle - 45, dist, pitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0), t6);
		pmo.LineAttack(angle - 70, dist, pitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0), t7);
		
		bool slapHit = false;
		
		if(t.linetarget && !t.linetarget.bNoTarget) { invoker.shieldSlapTarget(angle, t.linetarget, invoker.shieldSlapMult); slapHit = true; }
		if(t2.linetarget && !t2.linetarget.bNoTarget) { invoker.shieldSlapTarget(angle, t2.linetarget, invoker.shieldSlapMult); slapHit = true; }
		if(t3.linetarget && !t3.linetarget.bNoTarget) { invoker.shieldSlapTarget(angle, t3.linetarget, invoker.shieldSlapMult); slapHit = true; }
		if(t4.linetarget && !t4.linetarget.bNoTarget) { invoker.shieldSlapTarget(angle, t4.linetarget, invoker.shieldSlapMult); slapHit = true; }
		if(t5.linetarget && !t5.linetarget.bNoTarget) { invoker.shieldSlapTarget(angle, t5.linetarget, invoker.shieldSlapMult); slapHit = true; }
		if(t6.linetarget && !t6.linetarget.bNoTarget) { invoker.shieldSlapTarget(angle, t6.linetarget, invoker.shieldSlapMult); slapHit = true; }
		if(t7.linetarget && !t7.linetarget.bNoTarget) { invoker.shieldSlapTarget(angle, t7.linetarget, invoker.shieldSlapMult); slapHit = true; }
		
		if(slapHit)
		{
			A_StartSound("weapons/gauntletsactivate", CHAN_WEAPON);
			HVRHapticHelper.BuzzHand(isOffhand);
			if(invoker.shieldBreaks) shieldItem.shieldHealth = 0;
			shieldItem.shieldHitResponse();
			vector3 mPos =  (isOffhand ? pmo.OffhandPos : pmo.AttackPos) + (Actor.AngleToVector(pmo.angle, 1), 0) * pmo.radius / 2;
			if(invoker.showParticles) Actor.Spawn("ShieldBreakSparks", mPos);
			A_Overlay(3001, "ShieldSlap");
		}
	}
	
	void shieldSlapTarget(double angle, actor slapTarget, double dmgMultiplier = 2.0)
	{
		if(owner.player.mo.countinv("PowerWeaponLevel2")) dmgMultiplier *= frandom(3,4); //damage multiplier for tomed shield
		slapTarget.DaggerAlert(self);
		if( slapTarget.Mass < 10000 && !slapTarget.bDontThrust) slapTarget.A_Recoil(-5);
		slapTarget.DamageMobj(self,Self,random[StaffAttack](5, 20) * dmgMultiplier,"Melee",DMG_NO_PROTECT,angle); //damage enemy
	}
	
	void showShieldChargeFX()
	{
		if(!(owner.player.readyweapon == self || owner.player.offhandweapon == self) || !showParticles) return;
		
		particleFXpitch -= 9;
		
		let pmo = owner.player.mo;
		
		if(pmo.vel.x > 5 || pmo.vel.x < -5 || pmo.vel.y > 5 || pmo.vel.y < -5 || pmo.vel.z > 1 || pmo.vel.z < -1) return;
		
		//math is hard so taking the easy hacky way to rotate this vector
		
		double particleDist = 9;
		
		let shieldItem = HVRRuneShield(owner.player.mo.findinventory("HVRRuneShield"));
		if(shieldItem)
		{
			let shieldStrength = shieldItem.shieldStrength;
			let currentShieldHealth = shieldItem.shieldHealth;
			if(currentShieldHealth == shieldStrength) return;
			
			if(currentShieldHealth == 4) particleDist = 9;
			if(currentShieldHealth == 3) particleDist = 7.5;
			if(currentShieldHealth <= 2) particleDist = 6;
		}
		
		bool isOffhand = owner.player.OffhandWeapon == self;
		double angle = pmo.angle;
		double pitch = pmo.AimTarget() ? pmo.BulletSlope(null, ALF_PORTALRESTRICT) : pmo.pitch;
		
		let _puff = owner.player.mo.LineAttack(angle + 90, particleDist, pitch + particleFXpitch, 0, "melee", "HVRDUmmyPuff1", LAF_NOINTERACT | LAF_NOIMPACTDECAL | LAF_NORANDOMPUFFZ | (isOffhand ? LAF_ISOFFHAND : 0));
		if(_puff)
		{
			if(reduceParticles)
				A_SpawnParticle("FFFFFF", SPF_FULLBRIGHT, 2, 2, 0, _puff.pos.x, _puff.pos.y, _puff.pos.z);
			else
				Actor.Spawn((owner.player.mo.countinv("PowerWeaponLevel2") ? "PoweredStaffSparkSmall" : "StaffSparkSmall"), _puff.pos);
		}
	}

	States
	{
	Ready:
		TNT1 A 0;
		STFF A 0 A_SetExtraModel("NHST");
		#### # 0 A_JumpIf(invoker.owner.player.mo.countinv("HVRRuneShield") > 1, "ReadyShield"); 
		#### # 1 A_WeaponReady;
		Loop;
	ReadyShield:
		SHLD A 0 A_SetExtraModel("SHNH");
		#### # 0 A_JumpIf(shieldHealthRemain() == 4, "ReadyShield2");
		#### # 0 A_JumpIf(shieldHealthRemain() == 3, "ReadyShield3");
		#### # 0 A_JumpIf(shieldHealthRemain() == 2, "ReadyShield4");
		#### # 0 A_JumpIf(shieldHealthRemain() == 1, "ReadyShield5");
		#### # 0 A_JumpIf(shieldHealthRemain() == 0, "ReadyShieldDisabled");
		#### A 1 Bright A_WeaponReady;
		Goto Ready;
	ReadyShield2:
		#### C 1 Bright A_WeaponReady;
		Goto Ready;
	ReadyShield3:
		#### E 1 Bright A_WeaponReady;
		Goto Ready;
	ReadyShield4:
		#### G 1 Bright A_WeaponReady;
		Goto Ready;
	ReadyShield5:
		#### I 1 Bright A_WeaponReady;
		Goto Ready;
	ReadyShieldDisabled:
		#### K 1 Bright A_WeaponReady;
		Goto Ready;
	Deselect:
		STFF A 0 A_SetExtraModel("NHST");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Lower;
		Loop;
		#### # 1 A_Lower (120);
		Loop;
	Select:
		STFF A 0 A_SetExtraModel("NHST");
		#### # 0 A_JumpIf(invoker.fastSwitchWeapon == true, 2);
		#### # 1 A_Raise;
		Loop;
		#### # 1 A_Raise (120);
		Loop;
	Fire:
		#### # 0 A_JumpIf(invoker.owner.player.mo.countinv("HVRRuneShield") > 1, "ShieldActivate"); 
		STFF A 0 A_SetExtraModel("NHST");
		#### BCDEFG 1;
		#### H 1 A_StaffAttackX(random[StaffAttack](5, 20), "HVRStaffPuff");
		#### FDC 1;
		#### A 4;
		#### # 8 A_ReFire;
		Goto Ready;
	ShieldActivate:
		#### # 0 A_ShieldSlap();
		#### # 0 A_JumpIf(shieldHealthRemain() == 4, "ShieldActivate2");
		#### # 0 A_JumpIf(shieldHealthRemain() == 3, "ShieldActivate3");
		#### # 0 A_JumpIf(shieldHealthRemain() == 2, "ShieldActivate4");
		#### # 0 A_JumpIf(shieldHealthRemain() == 1, "ShieldActivate5");
		#### # 0 A_JumpIf(shieldHealthRemain() == 0, "ShieldNotReady");
		#### # 0 A_RaiseShield();
		#### B 35;
		Goto ReadyShield;
	ShieldActivate2:
		#### # 0 A_RaiseShield();
		#### D 35;
		Goto ReadyShield;
	ShieldActivate3:
		#### # 0 A_RaiseShield();
		#### F 35;
		Goto ReadyShield;
	ShieldActivate4:
		#### # 0 A_RaiseShield();
		#### H 35;
		Goto ReadyShield;
	ShieldActivate5:
		#### # 0 A_RaiseShield();
		#### J 35;
		Goto ReadyShield;
	ShieldNotReady:
		#### # 10;
		Goto ReadyShield;
	ShieldSlap:
		TNT1 A 0 A_OverlayFlags(3001, PSPF_RENDERSTYLE | PSPF_FORCEALPHA, true);
		TNT1 A 0 A_OverlayRenderstyle(3001, STYLE_Add);
		TNT1 A 0 A_OverlayAlpha(3001, 0.9);
		SLAP A 1;
		TNT1 A 0 A_OverlayAlpha(3001, 0.8);
		SLAP A 1;
		TNT1 A 0 A_OverlayAlpha(3001, 0.7);
		SLAP B 1;
		TNT1 A 0 A_OverlayAlpha(3001, 0.6);
		SLAP B 1;
		TNT1 A 0 A_OverlayAlpha(3001, 0.5);
		SLAP C 1;
		TNT1 A 0 A_OverlayAlpha(3001, 0.4);
		SLAP C 1;
		TNT1 A 0 A_OverlayAlpha(3001, 0.3);
		SLAP D 1;
		TNT1 A 0 A_OverlayAlpha(3001, 0.2);
		SLAP D 1;
		Stop;
	AltFire:
		#### # 20 {
			if(invoker.owner.player.mo.countinv("HVRRuneShield") > 1)
				invoker.owner.player.mo.takeinventory("HVRRuneShield", 1);
			else
				invoker.owner.player.mo.giveinventory("HVRRuneShield", 1);
		}
		Goto Ready;
	Placeholder:
		NHST A 1;
		SHNH A 1;
		Stop;
	}
}

Class HVRStaffPowered : HVRStaff
{
	Default
	{
	Weapon.SisterWeapon "HVRStaff";
	Weapon.ReadySound "weapons/staffcrackle";
	+WEAPON.POWERED_UP
	+WEAPON.READYSNDHALF
	+WEAPON.STAFF2_KICKBACK
	Obituary "$OB_MPPSTAFF";
	Tag "$TAG_STAFFP";
	}

	States
	{
	Fire:
		#### # 0 A_JumpIf(invoker.owner.player.mo.countinv("HVRRuneShield") > 1, "ShieldActivate"); 
		STFF A 0 A_SetExtraModel("NHST");
		#### BCDEFG 1;
		#### H 1 A_StaffAttackX(random[StaffAttack](18, 81), "HVRPoweredStaffPuff");
		#### FDC 1;
		#### A 4;
		#### # 8 A_ReFire;
		Goto Ready;
	}
}

Class HVRRuneShield : Inventory
{
	private bool showParticles;
	private bool reduceParticles;
	private bool shieldBreaks;
	private int shieldRegen;
	private int maxShield;
	private int lastHitTime;
	int shieldStrength;
	int shieldHealth;
	
	Default
	{
	Inventory.maxamount  2;
	}
	
	override void PostBeginPlay()
	{
		getConfig();
		if(owner && owner.player)
		{
			shieldHealth = shieldStrength;
		}
		Super.PostBeginPlay();
	}
	
	override void DoEffect()
	{
		getConfig();
		
		if(owner.player.mo.countinv("PowerWeaponLevel2")) shieldRegen /= 5; //tomed shield charge way quicker
		
		if(GetAge() && lastHitTime && GetAge() > lastHitTime + 35 * shieldRegen)
		{
			if(shieldHealth < shieldStrength) shieldHealth++;
			if(shieldHealth < shieldStrength)
				lastHitTime = GetAge();
			else
				lastHitTime = 0;
		}
		
		Super.DoEffect();
	}
	
	private void getConfig()
	{
		if(owner && owner.player)
		{
			let pmo = owner.player.mo;
			let configItem = HVRConfigItem(pmo.findinventory("HVRConfigItem"));
			if(configItem)
			{
				showParticles 		= configItem.showParticles;
				reduceParticles 	= configItem.lessParticles;
				shieldBreaks 		= configItem.shieldBreaks;
				shieldStrength 		= configItem.shieldStrength;
				shieldRegen 		= configItem.shieldRegen;
			}
		}
	}
	
	void shieldHitResponse()
	{
		if(!lastHitTime) lastHitTime = GetAge();
		if(shieldBreaks && shieldHealth > 0) shieldHealth--;
		
		if(owner && owner.player)
		{
			let pmo = owner.player.mo;
			bool isOffhand = owner.player.mo.countinv("PowerWeaponLevel2") ? !(owner.player.readyweapon is "HVRStaffPowered") : !(owner.player.readyweapon is "HVRStaff");
			vector3 mPos =  (isOffhand ? pmo.OffhandPos : pmo.AttackPos) + (Actor.AngleToVector(pmo.angle, 1), 0) * pmo.radius / 2;
			if(showParticles) Actor.Spawn("ShieldHitSparks", mPos);
		}
	}
}

CLass ReflectorShield : Actor
{
	override void Tick()
	{
		if(master)
		{
			let pmo = master.player.mo;
			bool isOffhand = pmo.countinv("PowerWeaponLevel2") ? !(master.player.readyweapon is "HVRStaffPowered") : !(master.player.readyweapon is "HVRStaff");
			vector3 mPos =  (isOffhand ? pmo.OffhandPos : pmo.AttackPos) + (Actor.AngleToVector(pmo.angle, 1), 0) * pmo.radius / 2;
			SetOrigin(mPos, true);
			A_SetAngle(isOffhand ? pmo.OffhandAngle : pmo.AttackAngle);
		}
		
		Super.Tick();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags = 0, double angle = 0)
	{
		//don't reflect projectiles from player
		if(master && source is master.player.mo.getclassname())
		{
			bREFLECTIVE = false;
			bAIMREFLECT = false;
			bSHOOTABLE = false;
		}
		else if(master && master.player)
		{
			let shieldItem = HVRRuneShield(master.player.mo.findinventory("HVRRuneShield"));
			if(shieldItem)
			{
				shieldItem.shieldHitResponse();
				A_StartSound("DSTELEPT", CHAN_WEAPON);
				HVRHapticHelper.BuzzHand(master.player.mo.countinv("PowerWeaponLevel2") ? !(master.player.readyweapon is "HVRStaffPowered") : !(master.player.readyweapon is "HVRStaff"));
			}
		}
		
		Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		return damage;
	}

	Default
	{
	Radius 6;
	Height 30;
	Mass 1;
	Scale 1;
	Species "HereticVRPlayer";
	+SHOOTABLE
	+REFLECTIVE
	+AIMREFLECT
	+NOGRAVITY
	+DONTTHRUST
	+NOBLOOD
	+DONTRIP
	+NOTARGET
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 35;
		Stop;
	}
}