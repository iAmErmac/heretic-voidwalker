
mixin class WallCheck
{
    override void PostBeginPlay()
    {
		Super.PostBeginPlay();
	
        Array<Double> wallDist;
        
        for(int i=0; i<36; i++)
            wallDist.Push(nearbyWallDist(i * 10)); //check for walls in every 10 degree angle
        
        double nearestWallDist = maxCheckDist;
        for(int i=0; i<wallDist.Size(); i++)
        {
            if(wallDist[i] && wallDist[i] < nearestWallDist)
                nearestWallDist = wallDist[i];
        }
        
        double angleTo = wallDist.Find(nearestWallDist);
        angleTo = angleTo * 10 + 180;
        A_SetAngle(angleTo); //face away from the nearest wall
    }
    
    double nearbyWallDist(double angle)
    {
        FLineTraceData lineData;
        bool hit = LineTrace(
           angle,
           maxCheckDist,
           0,
           offsetz: height/2,
           data: lineData
        );
        
        if(hit && lineData.HitType == TRACE_HitWall)
            return lineData.Distance;
        else
            return 0;
    }
    
    const maxCheckDist = 640;
}

mixin class HVRCustomProps
{
	override void Tick()
	{
		Playerinfo player = Players[ConsolePlayer];
		if(!player)
		{
			Super.Tick();
			return;
		}
		
		let pmo = player.mo;
		let configItem = HVRConfigItem(pmo.findinventory("HVRConfigItem"));
		if(configItem)
		{
			distModel = configItem.distModel;
			modelDist = configItem.modelDist;
			
			if(distModel)
			{
				if(Distance2D(pmo) > modelDist)
					pickupModel = 0;
				else
					pickupModel = configItem.pickupModel;
			}
			else
			{
				pickupModel = configItem.pickupModel;
			}
		}
		
		Super.Tick();
	}
	
	action void A_SetModel(string mvoxel, string m3d)
	{
		int ssprite = -1;
		
		if(invoker.pickupModel == 1 && mvoxel != "----")
			ssprite = GetSpriteIndex(mvoxel);
		else if(invoker.pickupModel == 2 && m3d != "----")
			ssprite = GetSpriteIndex(m3d);
			
		if(ssprite > -1) {
			invoker.sprite = ssprite;
		}
	}
	
	int pickupModel;
	bool distModel;
	int modelDist;
}

Class HVR_Barrel : Barrel
{
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		BARL A 1;
		Loop;
	SpawnVoxel:
		BARV A 1;
		Goto Spawn;
	Spawn3D:
		BARM A 1;
		Goto Spawn;
	}
}

Class HVR_BrownPillar : BrownPillar
{
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		BRPL A 1;
		Loop;
	SpawnVoxel:
		BRPV A 1;
		Goto Spawn;
	Spawn3D:
		BRPM A 1;
		Goto Spawn;
	}
}

Class HVR_Chandelier : Chandelier
{
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		CHDL ABC 4;
		Loop;
	SpawnVoxel:
		CHDV ABC 4;
		Goto Spawn;
	Spawn3D:
		TNT1 A 0 A_SpawnItemEx("HVR_ChandelierFlame");
		CHDM A 6;
		Goto Spawn;
	}
}

Class HVR_ChandelierFlame : Actor
{
	Default
	{
	+NOINTERACTION
	RenderStyle "Add";
	Alpha 0.8;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		CHDM ABC 2;
		Stop;
	}
}

Class HVR_FireBrazier : FireBrazier
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		KFR1 ABCDEFGH 3 Bright;
		Loop;
	SpawnVoxel:
		KFR1 N 1
			{
			A_SpawnItemEx("HVR_BrazFlame1", random(-6, 6), random(-6, 6), random(40, 43), 0, 0, random(1, 3));
			A_SpawnItemEx("HVR_BrazFlame1", random(-8, 8), random(-8, 8), random(42, 46), 0, 0, random(1, 2));
			A_SpawnItemEx("HVR_BrazFlame1", random(-10, 10), random(-10, 10), random(40, 42), 0, 0, random(1, 2));
			A_SpawnItemEx("HVR_BrazFlame2", random(-9, 9), random(-11, 11), random(40, 42), 0, 0, 1);
			A_SpawnItemEx("HVR_BrazFlame2", random(-11, 11), random(-9, 9), random(40, 42), 0, 0, 1);
			}
		Goto Spawn;
	Spawn3D:
		KFR1 M 1
			{
			A_SpawnItemEx("HVR_BrazFlame1", random(-6, 6), random(-6, 6), random(40, 43), 0, 0, random(1, 3));
			A_SpawnItemEx("HVR_BrazFlame1", random(-8, 8), random(-8, 8), random(42, 46), 0, 0, random(1, 2));
			A_SpawnItemEx("HVR_BrazFlame1", random(-10, 10), random(-10, 10), random(40, 42), 0, 0, random(1, 2));
			A_SpawnItemEx("HVR_BrazFlame2", random(-9, 9), random(-11, 11), random(40, 42), 0, 0, 1);
			A_SpawnItemEx("HVR_BrazFlame2", random(-11, 11), random(-9, 9), random(40, 42), 0, 0, 1);
			}
		Goto Spawn;
	}
}

Class HVR_BrazFlame1 : Actor
{
	Default
	{
	+NOINTERACTION
	RenderStyle "translucent";
	alpha 0.7;
	}
	
	states
	{
	Spawn:
		RVRF ABCDEFFGGHHH 2 BRIGHT;
		stop;
	}
}

Class HVR_BrazFlame2 : Actor
{
	Default
	{
	+NOINTERACTION
	RenderStyle "add";
	alpha 0.7;
	}
	
	states
	{
	Spawn:
		RVRF ABCDEFGH 2 BRIGHT;
		stop;
	}
}

Class HVR_HangingCorpse : HangingCorpse
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		HCOR A 1;
		Loop;
	SpawnVoxel:
		HCRV A 1;
		Goto Spawn;
	Spawn3D:
		HCRM A 1;
		Goto Spawn;
	}
}

Class HVR_KeyGizmoBlue : KeyGizmoBlue
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		KGZ1 A 1 A_SpawnItemEx("HVR_KeyGizmoFloatBlue", 0, 0, 60);
		Loop;
	SpawnVoxel:
		KG1V A 1 A_SpawnItemEx("HVR_KeyGizmoFloatBlue2", 0, 0, 60);
		Goto Spawn;
	Spawn3D:
		KG1M A 1 A_SpawnItemEx("HVR_KeyGizmoFloatBlue3", 0, 0, 60);
		Goto Spawn;
	}
}

Class HVR_KeyGizmoFloatBlue : KeyGizmoFloatBlue
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGZB A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoFloatBlue2 : KeyGizmoFloatBlue
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGBV A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoFloatBlue3 : KeyGizmoFloatBlue
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGBM A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoGreen : KeyGizmoGreen
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		KGZ1 A 1 A_SpawnItemEx("HVR_KeyGizmoFloatGreen", 0, 0, 60);
		Loop;
	SpawnVoxel:
		KG1V A 1 A_SpawnItemEx("HVR_KeyGizmoFloatGreen2", 0, 0, 60);
		Goto Spawn;
	Spawn3D:
		KG1M A 1 A_SpawnItemEx("HVR_KeyGizmoFloatGreen3", 0, 0, 60);
		Goto Spawn;
	}
}

Class HVR_KeyGizmoFloatGreen : KeyGizmoFloatGreen
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGZG A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoFloatGreen2 : KeyGizmoFloatGreen
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGGV A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoFloatGreen3 : KeyGizmoFloatGreen
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGGM A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoYellow : KeyGizmoYellow
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		KGZ1 A 1 A_SpawnItemEx("HVR_KeyGizmoFloatYellow", 0, 0, 60);
		Loop;
	SpawnVoxel:
		KG1V A 1 A_SpawnItemEx("HVR_KeyGizmoFloatYellow2", 0, 0, 60);
		Goto Spawn;
	Spawn3D:
		KG1M A 1 A_SpawnItemEx("HVR_KeyGizmoFloatYellow3", 0, 0, 60);
		Goto Spawn;
	}
}

Class HVR_KeyGizmoFloatYellow : KeyGizmoFloatYellow
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGZY A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoFloatYellow2 : KeyGizmoFloatYellow
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGYV A 2 Bright;
		Stop;
	}
}

Class HVR_KeyGizmoFloatYellow3 : KeyGizmoFloatYellow
{
	mixin WallCheck;
	
	States
	{
	Spawn:
		KGYM A 2 Bright;
		Stop;
	}
}

Class HVR_Moss1 : Moss1
{
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		MOS1 A 1;
		Loop;
	SpawnVoxel:
		MS1V A 1;
		Goto Spawn;
	Spawn3D:
		MS1M A 1;
		Goto Spawn;
	}
}

Class HVR_Moss2 : Moss2
{
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		MOS2 A 1;
		Loop;
	SpawnVoxel:
		MS2V A 1;
		Goto Spawn;
	Spawn3D:
		MS2M A 1;
		Goto Spawn;
	}
}

Class HVR_Pod : Pod replaces Pod
{
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0;
		PPOD A 0 A_SetModel("----", "PODM");
		#### A 1;
		Loop;
	Pain:
		PPOD B 0 A_SetModel("----", "PODM");
		#### B 14 A_PodPain;
		Goto Spawn;
	Death:
		PPOD C 5 Bright A_RemovePod;
		#### D 5 Bright A_Scream;
		#### E 5 Bright A_Explode;
		#### F 10 Bright;
		Stop;
	Grow:
		TNT1 A 1;
		TNT1 A 0 A_SetAngle(random(1,18) * 20);
		PPOD I 0 A_SetModel("----", "PODM");
		#### IJKLMNOP 3;
		Goto Spawn;
	Model:
		PODM A 1;
		Stop;
	}
}

Class HVR_PodGoo : PodGoo
{
	mixin HVRCustomProps;
	
	States
	{
	Spawn:
		TNT1 A 0;
		PPOD I 0 A_SetModel("----", "PODM");
		#### GH 8;
		Loop;
	Death:
		PPOD I 0 A_SetModel("----", "PODM");
		#### G 10;
		Stop;
	}
}

Class HVR_WallTorch : WallTorch
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		WTRH ABC 6 Bright;
		loop;
	SpawnVoxel:
		WTRV A 1 A_SpawnItemEx("HVR_TorchFlame1", random(-1, 1), random(-1, 1), 72, 0, 0, random(1, 2));
		WTRV A 1 A_SpawnItemEx("HVR_TorchFlame2", random(-1, 1), random(-1, 1), 72, 0, 0, 1);
		Goto Spawn;
	Spawn3D:
		WTRM A 1 A_SpawnItemEx("HVR_TorchFlame1", random(-1, 1), random(-1, 1), 72, 0, 0, random(1, 2));
		WTRM A 1 A_SpawnItemEx("HVR_TorchFlame2", random(-1, 1), random(-1, 1), 72, 0, 0, 1);
		Goto Spawn;
	}
}

Class HVR_TorchFlame1 : Actor
{
	Default
	{
	+NOINTERACTION
	RenderStyle "translucent";
	alpha 0.7;
	}
	
	states
	{
	Spawn:
		RVRF CDEFGH 2 BRIGHT;
		stop;
	}
}
Class HVR_TorchFlame2 : Actor
{
	Default
	{
	+NOINTERACTION
	RenderStyle "add";
	alpha 0.7;
	}
	
	states
	{
	Spawn:
		RVRF CDEF 2 BRIGHT;
		stop;
	}
}

Class HVR_SerpentTorch : SerpentTorch
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		SRTC ABC 4;
		loop;
	SpawnVoxel:
		SRTV A 1 A_SpawnItemEx("HVR_SerpFlame1", random(-1, 1), random(-1, 1), 50, 0, 0, random(1, 2));
		SRTV A 1 A_SpawnItemEx("HVR_SerpFlame2", random(-2, 2), random(-2, 2), 50, 0, 0, random(1, 2));
		Goto Spawn;
	Spawn3D:
		SRTM A 1 A_SpawnItemEx("HVR_SerpFlame1", random(-1, 1), random(-1, 1), 50, 0, 0, random(1, 2));
		SRTM A 1 A_SpawnItemEx("HVR_SerpFlame2", random(-2, 2), random(-2, 2), 50, 0, 0, random(1, 2));
		Goto Spawn;
	}
}

Class HVR_SerpFlame1 : Actor
{
	Default
	{
	+NOINTERACTION
	RenderStyle "translucent";
	alpha 0.7;
	}
	
	states
	{
	Spawn:
		RVRF EF 3 BRIGHT;
		RVRF GH 2 BRIGHT;
		stop;
	}
}

Class HVR_SerpFlame2 : Actor
{
	Default
	{
	+NOINTERACTION
	RenderStyle "add";
	alpha 0.7;
	}
	
	states
	{
	Spawn:
		RVRF E 3 BRIGHT;
		RVRF F 2 BRIGHT;
		stop;
	}
}

Class HVR_SkullHang35 : SkullHang35
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetAngle(random(1,6) * random(-1,1) * 10);
	SpawnSkull:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		SKH4 A 1;
		loop;
	SpawnVoxel:
		SKV4 A 1;
		Goto SpawnSkull;
	Spawn3D:
		SKM4 A 1;
		Goto SpawnSkull;
	}
}

Class HVR_SkullHang45 : SkullHang45
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetAngle(random(1,6) * random(-1,1) * 10);
	SpawnSkull:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		SKH3 A 1;
		loop;
	SpawnVoxel:
		SKV3 A 1;
		Goto SpawnSkull;
	Spawn3D:
		SKM3 A 1;
		Goto SpawnSkull;
	}
}

Class HVR_SkullHang60 : SkullHang60
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetAngle(random(1,6) * random(-1,1) * 10);
	SpawnSkull:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		SKH2 A 1;
		loop;
	SpawnVoxel:
		SKV2 A 1;
		Goto SpawnSkull;
	Spawn3D:
		SKM2 A 1;
		Goto SpawnSkull;
	}
}

Class HVR_SkullHang70 : SkullHang70
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetAngle(random(1,6) * random(-1,1) * 10);
	SpawnSkull:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		SKH1 A 1;
		loop;
	SpawnVoxel:
		SKV1 A 1;
		Goto SpawnSkull;
	Spawn3D:
		SKM1 A 1;
		Goto SpawnSkull;
	}
}

Class HVR_SmallPillar : SmallPillar
{
	mixin WallCheck;
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		SMPL A 1;
		loop;
	SpawnVoxel:
		SPLV A 1;
		Goto Spawn;
	Spawn3D:
		SPLM A 1;
		Goto Spawn;
	}
}

Class HVR_StalactiteLarge : StalactiteLarge
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		STCL A 1;
		loop;
	SpawnVoxel:
		SCLV A 1;
		Goto Spawn;
	Spawn3D:
		SCLM A 1;
		Goto Spawn;
	}
}

Class HVR_StalactiteSmall : StalactiteSmall
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		STCS A 1;
		loop;
	SpawnVoxel:
		SCSV A 1;
		Goto Spawn;
	Spawn3D:
		SCSM A 1;
		Goto Spawn;
	}
}

Class HVR_StalagmiteLarge : StalagmiteLarge
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		STGL A 1;
		loop;
	SpawnVoxel:
		SGLV A 1;
		Goto Spawn;
	Spawn3D:
		SGLM A 1;
		Goto Spawn;
	}
}

Class HVR_StalagmiteSmall : StalagmiteSmall
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		STGS A 1;
		loop;
	SpawnVoxel:
		SGSV A 1;
		Goto Spawn;
	Spawn3D:
		SGSM A 1;
		Goto Spawn;
	}
}

Class HVR_Volcano : Volcano
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVoxel");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		VLCO A 350;
	SpawnVolcano:
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 1, "SpawnVolcanoVxl");
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "SpawnVolcano3D");
		VLCO A 35 A_VolcanoSet;
		VLCO BCDBCD 3;
		VLCO E 10 A_VolcanoBlast;
		Goto SpawnVolcano;
	SpawnVoxel:
		VLCV A 350;
	SpawnVolcanoVxl:
		VLCV A 35 A_VolcanoSet;
		VLCV BCDBCD 3;
		VLCV E 10 A_VolcanoBlast;
		Goto SpawnVolcano;
	Spawn3D:
		VLCM A 350;
	SpawnVolcano3D:
		VLCM A 35 A_VolcanoSet;
		VLCM BCDBCD 3;
		VLCM E 10 A_VolcanoBlast;
		Goto SpawnVolcano;
	}
}

Class HVR_VolcanoBlast : VolcanoBlast
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		VFBL AB 4 BRIGHT A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
		Loop;
	Spawn3D:
		VFBM AB 4 BRIGHT A_SpawnItemEx("Puffy", random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, random2[BeastPuff]()*0.015625, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION, 64);
		Goto Spawn;
	Death:
		XPL1 A 4 BRIGHT A_VolcBallImpact;
		XPL1 BCDEF 4 BRIGHT;
		Stop;
	}
}

Class HVR_VolcanoTBlast : VolcanoTBlast
{
	mixin HVRCustomProps;
	
	states
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(invoker.pickupModel == 2, "Spawn3D");
		VTFB AB 4 Bright;
		Loop;
	Spawn3D:
		VTFM AB 4 Bright;
		Goto Spawn;
	Death:
		SFFI CBABCDE 4 Bright;
		Stop;
	}
}

Class HVR_WaterSplashBase : WaterSplashBase replaces WaterSplashBase
{
	States
	{
	Spawn:
		SPSH E 0 nodelay A_SetAngle(random(0,359));
		SPSH EFGHIJK 5;
		Stop;
	}
}

Class HVR_WaterSplash : WaterSplash replaces WaterSplash
{
	States
	{
	Spawn:
		SPSH A 0 nodelay A_SetAngle(random(0,359));
		SPSH ABC 8;
		SPSH D 16;
		Stop;
	}
}