// Copyright 2018-2020 Alexander Kromm (m8f/mmaulwurff)
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/
//
// This cvar loader is taken from laser sight mod by Alexander Kromm (m8f/mmaulwurff)

class hvr_Settings
{
  int weaponModel()   					{ return weaponModelCvar.getInt();   	}
  int pickupModel()   					{ return pickupModelCvar.getInt();   	}
  bool flashSprite()   					{ return flashSpriteCvar.getBool();   	}
  bool showParticles()   				{ return particlesCvar.getBool();   	}
  bool lessParticles()   				{ return lessParticlesCvar.getBool();   }
  bool weaponSwitch()   				{ return weaponSwitchCvar.getBool();   	}
  int holoHUD()   					{ return holoHUDCvar.getInt();   	}
  int gauntletHand()   					{ return gauntletCvar.getInt();   	}
  bool distModel()   					{ return distModelCvar.getBool();   	}
  int modelDist()   					{ return modelDistCvar.getInt();   	}
  bool hasShield()   					{ return shieldCVar.getBool();   	}
  bool shieldStart()   					{ return shieldStartCVar.getBool();   	}
  bool shieldBreaks()   				{ return shieldBreakCvar.getBool();   	}
  int shieldStrength()   				{ return shieldStrengthCvar.getInt();   }
  double shieldRegen()   				{ return shieldRegenCvar.getDouble();   }
  bool shieldSlap()   					{ return shieldSlapCvar.getBool();   	}
  int shieldSlapDist()   				{ return shieldSlapDistCvar.getInt();   }
  double shieldSlapMult()   				{ return shieldSlapMultCvar.getDouble(); }
  
  //int vrControlScheme() 				{ return controlSchemeCvar.isDefined() ? controlSchemeCvar.getInt() : 0; }

  static
  hvr_Settings of()
  {
    let result = new("hvr_Settings");

    result.weaponModelCvar 		   		= hvr_CVar.of("hvr_weaponmodel");
    result.pickupModelCvar 		   		= hvr_CVar.of("hvr_pickupmodel");
    result.flashSpriteCvar 		   		= hvr_CVar.of("hvr_flashsprite");
    result.particlesCvar 		   		= hvr_CVar.of("hvr_particles");
    result.lessParticlesCvar 		   		= hvr_CVar.of("hvr_lessparticle");
    result.weaponSwitchCvar   				= hvr_CVar.of("hvr_fastswitch");
    result.holoHUDCvar   				= hvr_CVar.of("hvr_holohud");
    result.distModelCvar   				= hvr_CVar.of("hvr_loadsprite");
    result.modelDistCvar   				= hvr_CVar.of("hvr_model_dist");
    result.shieldCVar   				= hvr_CVar.of("hvr_shield");
    result.shieldStartCVar   				= hvr_CVar.of("hvr_shield_start");
    result.shieldBreakCvar   				= hvr_CVar.of("hvr_shield_break");
    result.shieldStrengthCvar   			= hvr_CVar.of("hvr_shield_str");
    result.shieldRegenCvar   				= hvr_CVar.of("hvr_shield_regen");
    result.shieldSlapCvar   				= hvr_CVar.of("hvr_shield_slap");
    result.shieldSlapDistCvar   			= hvr_CVar.of("hvr_slap_dist");
    result.shieldSlapMultCvar   			= hvr_CVar.of("hvr_slap_mult");

    return result;
  }

  private hvr_CVar weaponModelCvar;
  private hvr_CVar pickupModelCvar;
  private hvr_CVar flashSpriteCvar;
  private hvr_CVar particlesCvar;
  private hvr_CVar lessParticlesCvar;
  private hvr_CVar weaponSwitchCvar;
  private hvr_CVar holoHUDCvar;
  private hvr_CVar gauntletCvar;
  private hvr_CVar distModelCvar;
  private hvr_CVar modelDistCvar;
  private hvr_CVar shieldCVar;
  private hvr_CVar shieldStartCVar;
  private hvr_CVar shieldBreakCvar;
  private hvr_CVar shieldStrengthCvar;
  private hvr_CVar shieldRegenCvar;
  private hvr_CVar shieldSlapCvar;
  private hvr_CVar shieldSlapDistCvar;
  private hvr_CVar shieldSlapMultCvar;
  
  private hvr_CVar controlSchemeCvar;

} // class hvr_Settings

/**
 * This class provides access to a user or server Cvar.
 *
 * Accessing Cvars through this class is faster because calling Cvar.GetCvar()
 * is costly. This class caches the result of Cvar.GetCvar() and handles
 * loading a savegame.
 */
class hvr_CVar
{

// public: /////////////////////////////////////////////////////////////////////

  static
  hvr_CVar of(String name)
  {
    let result = new("hvr_CVar");
    result._name = name;
    return result;
  }

  bool   isDefined() { load(); return (_cvar != NULL);   }

  String getString() { load(); return _cvar.GetString(); }
  bool   getBool()   { load(); return _cvar.GetInt();    }
  int    getInt()    { load(); return _cvar.GetInt();    }
  double getDouble() { load(); return _cvar.GetFloat();  }

// private: ////////////////////////////////////////////////////////////////////

  private
  void load()
  {
    if (_cvar == NULL)
    {
      PlayerInfo player = players[consolePlayer];

      _cvar = Cvar.GetCvar(_name, player);
    }
  }

  private String         _name;
  private transient Cvar _cvar;

} // class hvr_CVar